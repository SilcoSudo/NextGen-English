const jwt = require('jsonwebtoken');
const User = require('../models/User');

// Middleware x√°c th·ª±c JWT token
const authenticateToken = async (req, res, next) => {
  try {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN
    
    console.log('üîê Auth header:', authHeader ? 'Present' : 'Missing');
    console.log('üîê Token:', token ? `${token.substring(0, 20)}...` : 'Missing');

    if (!token) {
      console.log('‚ùå No token provided');
      return res.status(401).json({
        error: 'Kh√¥ng c√≥ token',
        message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p t√†i nguy√™n n√†y'
      });
    }

    // X√°c th·ª±c token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // T√¨m user t·ª´ token
    const user = await User.findById(decoded.userId);
    if (!user) {
      console.log('‚ùå User not found for token:', decoded.userId);
      return res.status(401).json({
        error: 'Token kh√¥ng h·ª£p l·ªá',
        message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i'
      });
    }

    if (!user.isActive) {
      console.log('‚ùå User account is inactive:', user.username);
      return res.status(401).json({
        error: 'T√†i kho·∫£n b·ªã kh√≥a',
        message: 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a'
      });
    }

    // Th√™m th√¥ng tin user v√†o request (toJSON s·∫Ω t·ª± ƒë·ªông lo·∫°i b·ªè password)
    req.user = user.toJSON();
    console.log('‚úÖ User authenticated:', user.username, 'Role:', user.role);
    next();
  } catch (error) {
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({
        error: 'Token h·∫øt h·∫°n',
        message: 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i'
      });
    }
    
    if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({
        error: 'Token kh√¥ng h·ª£p l·ªá',
        message: 'Token x√°c th·ª±c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng'
      });
    }

    console.error('Auth middleware error:', error);
    res.status(500).json({
      error: 'L·ªói m√°y ch·ªß',
      message: 'C√≥ l·ªói x·∫£y ra khi x√°c th·ª±c'
    });
  }
};

// Middleware ki·ªÉm tra quy·ªÅn admin
const requireAdmin = (req, res, next) => {
  if (!req.user) {
    return res.status(401).json({
      error: 'Ch∆∞a x√°c th·ª±c',
      message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc'
    });
  }

  if (req.user.role !== 'admin') {
    return res.status(403).json({
      error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
      message: 'Ch·ªâ admin m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y'
    });
  }

  next();
};

// Middleware ki·ªÉm tra quy·ªÅn student ho·∫∑c admin
const requireStudent = (req, res, next) => {
  if (!req.user) {
    return res.status(401).json({
      error: 'Ch∆∞a x√°c th·ª±c',
      message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc'
    });
  }

  if (!['student', 'admin'].includes(req.user.role)) {
    return res.status(403).json({
      error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
      message: 'C·∫ßn quy·ªÅn h·ªçc sinh ƒë·ªÉ truy c·∫≠p t√†i nguy√™n n√†y'
    });
  }

  next();
};

// Middleware t√πy ch·ªçn - kh√¥ng b·∫Øt bu·ªôc ph·∫£i ƒëƒÉng nh·∫≠p
const optionalAuth = async (req, res, next) => {
  try {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (token) {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      const user = await User.findById(decoded.userId);
      
      if (user && user.isActive) {
        req.user = user.toJSON();
      }
    }
    
    next();
  } catch (error) {
    // N·∫øu c√≥ l·ªói v·ªõi token, v·∫´n ti·∫øp t·ª•c nh∆∞ng kh√¥ng set user
    next();
  }
};

module.exports = {
  authenticateToken,
  requireAdmin,
  requireStudent,
  optionalAuth
};